{"version":3,"sources":["utils/fetchClient.ts","helpers.jsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","status","statusText","json","client","getPostComments","postId","getUserPost","addPostComment","deletePostComment","commentId","PostsList","posts","selectPost","selectedPostId","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","setIsError","useState","name","setName","email","setEmail","text","setText","isNameError","setIsNameError","isEmailError","setIsEmailError","isTextError","setIsTextError","isLoading","setIsLoading","handleFieldChange","useCallback","func","event","value","target","onSubmit","a","preventDefault","newComment","htmlFor","placeholder","onChange","PostDetails","React","memo","comments","setCommnets","setPost","isError","isWriteComment","setIsWriteComment","loadDataCommets","commentsData","useEffect","currentPostHandle","postData","onCommentDelete","length","comment","href","UserSelector","users","selectUserId","userId","isDropDownOpen","setIsDropDownOpen","userData","useMemo","role","user","App","setUsers","selectedUserId","setSelectedUserId","userPosts","setUserPosts","setSelectedPostId","loadDataUsers","usersData","selectedUserHandleChange","loadDataUserPosts","postsData","selectedPostHandleChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9493a90a.chunk.js","sourcesContent":["/* eslint-disable  @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from './utils/fetchClient';\n\n// import { User } from \"./types/User\";\n// import { Post } from \"./types/Post\";\n\nexport const getUsers = () => {\n  return client.get('/users');\n};\n\nexport const getUserPosts = (userId) => {\n  return client.get(`/posts?userId=${userId}`);\n};\n\nexport const getUser = (userId) => {\n  return client.get(`/users/${userId}`);\n};\n\nexport const getPostComments = (postId) => {\n  return client.get(`/comments?postId=${postId}`);\n};\n\nexport const getUserPost = (postId) => {\n  return client.get(`/posts/${postId}`);\n};\n\nexport const addPostComment = (postId, data) => {\n  return client.post(`/comments?postId=${postId}`, data);\n};\n\nexport const deletePostComment = (commentId) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectPost: (value: number | null) => void,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPost,\n  selectedPostId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n\n                {selectedPostId === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      { 'is-light': selectedPostId !== post.id },\n                    )}\n                    onClick={() => {\n                      selectPost(null);\n                    }}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      { 'is-light': selectedPostId !== post.id },\n                    )}\n                    onClick={() => {\n                      selectPost(post.id);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\n\nimport { addPostComment } from '../helpers';\n\ntype Props = {\n  postId: number | null,\n  setIsError: (value: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, setIsError }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isTextError, setIsTextError] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFieldChange = useCallback((\n    func:(value: string) => void,\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { value } = event.target;\n\n    if (name) {\n      setIsNameError(false);\n    }\n\n    if (email) {\n      setIsEmailError(false);\n    }\n\n    if (text) {\n      setIsTextError(false);\n    }\n\n    if (value !== ' ') {\n      func(value);\n    }\n  }, [email, name, text]);\n\n  const onSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    if (!name) {\n      setIsNameError(true);\n    }\n\n    if (!email) {\n      setIsEmailError(true);\n    }\n\n    if (!text) {\n      setIsTextError(true);\n    }\n\n    if (postId && name && email && text) {\n      const newComment = {\n        postId,\n        name,\n        email,\n        body: text,\n      };\n\n      try {\n        await addPostComment(postId, newComment);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    setIsLoading(false);\n    setText('');\n  };\n\n  const resetFields = () => {\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(event) => onSubmit(event)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={(event) => handleFieldChange(setName, event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={(event) => handleFieldChange(setEmail, event)}\n\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isTextError },\n            )}\n            value={text}\n            onChange={(event) => handleFieldChange(setText, event)}\n\n          />\n        </div>\n\n        {isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetFields}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\n// import { CommentData } from '../types/Comment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\nimport { getPostComments, getUserPost, deletePostComment } from '../helpers';\n\ntype Props = {\n  postId: number | null,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(\n  ({ postId }) => {\n    const [comments, setCommnets] = useState<Comment[]>([]);\n    const [post, setPost] = useState<Post | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [isWriteComment, setIsWriteComment] = useState(false);\n\n    const loadDataCommets = async () => {\n      try {\n        const commentsData = await getPostComments(postId);\n\n        setCommnets(commentsData);\n      } catch {\n        if (post !== null) {\n          setIsError(true);\n        }\n      }\n    };\n\n    useEffect(() => {\n      loadDataCommets();\n    }, [postId, comments]);\n\n    const currentPostHandle = async () => {\n      try {\n        setIsLoading(true);\n\n        const postData = await getUserPost(postId);\n\n        setPost(postData);\n        setIsWriteComment(false);\n\n        setIsError(false);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n      }\n    };\n\n    useEffect(() => {\n      if (postId !== null) {\n        currentPostHandle();\n      }\n    }, [postId]);\n\n    const onCommentDelete = async (commentId: number) => {\n      try {\n        await deletePostComment(commentId);\n      } catch (error) {\n        setIsError(true);\n      }\n    };\n\n    return (\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            {post && (\n              <h2 data-cy=\"PostTitle\">\n                #\n                {post?.id}\n                :\n                {' '}\n                {post?.title}\n              </h2>\n            )}\n\n            <p data-cy=\"PostBody\">\n              {post?.body}\n            </p>\n          </div>\n\n          <div className=\"block\">\n            {isLoading && (\n              <Loader />\n            )}\n\n            {isError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n\n            {!isLoading && (\n              <>\n                {!comments.length && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                {!!comments.length && (\n                  <p className=\"title is-4\">Comments:</p>\n                )}\n\n                {comments.map((comment) => (\n                  <>\n                    {post && (\n                      <article\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                        key={comment.id}\n                      >\n                        <div className=\"message-header\">\n                          <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                            {comment.name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => onCommentDelete(comment.id)}\n\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {comment.body}\n                        </div>\n                      </article>\n                    )}\n                  </>\n                ))}\n\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsWriteComment(true)}\n                >\n                  Write a comment\n                </button>\n              </>\n            )}\n          </div>\n\n          {isWriteComment && (\n            <NewCommentForm\n              postId={postId}\n              setIsError={setIsError}\n            />\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { useMemo, useState } from 'react';\n\nimport { User } from '../types/User';\n\n// import { getUser } from '../helpers';\n\ntype Props = {\n  users: User[],\n  selectUserId: (value: number) => void,\n  userId: number,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(\n  ({ users, selectUserId, userId }) => {\n    const [isDropDownOpen, setIsDropDownOpen] = useState(false);\n\n    const dropDownChange = () => {\n      setIsDropDownOpen(!isDropDownOpen);\n    };\n\n    const userData = useMemo(\n      () => users[userId - 1],\n      [userId],\n    );\n\n    return (\n      <div\n        data-cy=\"UserSelector\"\n        className=\"dropdown is-active\"\n      >\n        <div className=\"dropdown-trigger\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={dropDownChange}\n          >\n\n            {!userData ? (\n              <span>Choose a user</span>\n            ) : (\n              <p>{userData.name}</p>\n            )}\n\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n            </span>\n          </button>\n        </div>\n\n        {isDropDownOpen && (\n          <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n            <div className=\"dropdown-content\">\n              {users.map((user) => (\n                <a\n                  key={user.id}\n                  href={`#user-${user.id}`}\n                  className=\"dropdown-item\"\n                  onClick={() => {\n                    selectUserId(user.id);\n                    setIsDropDownOpen(false);\n                  }}\n                >\n                  {user.name}\n                </a>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { getUsers, getUserPosts } from './helpers';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<number>(-1);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const loadDataUsers = async () => {\n    try {\n      const usersData = await getUsers();\n\n      setUsers(usersData);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadDataUsers();\n  }, []);\n\n  const selectedUserHandleChange = useCallback((value: number) => {\n    setSelectedUserId(value);\n  }, [selectedUserId]);\n\n  const loadDataUserPosts = async () => {\n    try {\n      setIsLoading(true);\n      const postsData = await getUserPosts(selectedUserId);\n\n      setIsLoading(false);\n      setUserPosts(postsData);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadDataUserPosts();\n  }, [selectedUserId]);\n\n  const selectedPostHandleChange = useCallback((value: number | null) => {\n    setSelectedPostId(value);\n  }, [selectedPostId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectUserId={selectedUserHandleChange}\n                  userId={selectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId < 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUserId !== -1 && !userPosts.length && !isLoading && (\n                  <p className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </p>\n                )}\n\n                {!!userPosts.length && !isLoading && (\n                  <PostsList\n                    posts={userPosts}\n                    selectPost={selectedPostHandleChange}\n                    selectedPostId={selectedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails postId={selectedPostId} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}